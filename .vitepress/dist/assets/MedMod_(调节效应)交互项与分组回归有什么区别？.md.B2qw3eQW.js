import{_ as a,c as _,o as t,l as e,a as o,a1 as p}from"./chunks/framework.ZVjbeeCo.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"MedMod/(调节效应)交互项与分组回归有什么区别？.md","filePath":"MedMod/(调节效应)交互项与分组回归有什么区别？.md"}'),r={name:"MedMod/(调节效应)交互项与分组回归有什么区别？.md"},i=e("h2",{id:"调节效应-交互项与分组回归有什么区别",tabindex:"-1"},[o("(调节效应)交互项与分组回归有什么区别？ "),e("a",{class:"header-anchor",href:"#调节效应-交互项与分组回归有什么区别","aria-label":'Permalink to "(调节效应)交互项与分组回归有什么区别？"'},"​")],-1),s=e("div",{style:{"text-align":"center"}},[e("div",{style:{border:"2px solid #ccc",padding:"10px",display:"inline-block"}},[e("iframe",{src:"//player.bilibili.com/player.html?bvid=BV197411J7B3&page=1",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true",style:{width:"750px",height:"450px"}})])],-1),l=p('<p>我们要分享一个关于调节效应的问题：交互项的调节效应和分组回归之间有什么区别呢？</p><p>之前，我们分享过一期关于调节效应的视频，里面主要要是使用交互项来实现调节效应。但是，我们看到一些论文，他们可能选择分组回归作为文件性检验，或者在一开始想验证调节效应时，就直接用分组回归。那么，使用交互项实现的调节效应和分组回归是使用交互项的方式来实现调节效应。但是，我们在一些论文中看到，有时会选择分组有什么区回归作为文件性检验，或者在开始想验证调节效应的时候直接使用分组回归。那么，使用交互项实现的调节效别呢？下面，我们简要应和分组回归有什么区别呢？下面分享一下。</p><h2 id="交互项" tabindex="-1">交互项 <a class="header-anchor" href="#交互项" aria-label="Permalink to &quot;交互项&quot;">​</a></h2><p>首先，我们假设，我们假设调节变量是一个比较简单的分组变量，例如A组和B组，我们用01来表示。在这种情况下，我们可以看到以下两个方程：</p><p>对于A组调节变量是一个比较简单的分组变量，例如A组和B组，我们可以用01来表示。在这种情况下，我们可以得到以下两个方程：</p><p>交互项：$y = \\beta_0 + \\beta_1 x_1 + \\beta_2 D_1 + \\beta_3 x_1 *D_1 + \\beta_4x_3 + \\epsilon_1 $</p><p>对于A组（D=0)：$y = \\beta_0 + \\beta_1 x_1 + \\beta_4x_3 + \\epsilon_1 $</p><p>对于B组（D=1)：$y = \\beta_0 + \\beta_1 x_1 + \\beta_2 + \\beta_3 x_1 + \\beta_4x_3 + \\epsilon_1 $</p><p>我们可以发现，最大的一个假设是我们关于控制变量的假设。 <strong>交互项是假设两组A组与B组的控制变量系数是相通的。</strong></p><h2 id="分组回归" tabindex="-1">分组回归 <a class="header-anchor" href="#分组回归" aria-label="Permalink to &quot;分组回归&quot;">​</a></h2><p>分组回归相当于放宽了假设，因为它是独立的两个样本进行一个估计的。这样估计的话，它允许控制变量的系数不一致。但它的缺点是因为做了一个分组，你的样本量就会受到一些限制。比如说两个样本Sample1和Sample2加起来可能有1500个，但是你这样一分，可能使得某一组别的一个样本会比较偏少，使得估计没有那么容易得到一个比较大样本的结果。</p><p>分组回归</p><p>对于A组（D=0)的样本，使用：$y = \\beta_0 + \\beta_1 x_1 + \\beta_2x_3 + \\epsilon_1 $，进行估计</p><p>对于B组（D=1)的样本，使用相同的方程：$y = \\beta_0 + \\beta_1 x_1 + \\beta_2x_3 + \\epsilon_1 $，进行估计。</p><p>这样就允许两组样本控制变量的系数不同。</p>',15),n=[i,s,l];function d(c,b,h,x,m,f){return t(),_("div",null,n)}const y=a(r,[["render",d]]);export{u as __pageData,y as default};
