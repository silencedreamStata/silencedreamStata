import{_ as a,c as o,a as t,l as e,a1 as r,o as l}from"./chunks/framework.ZVjbeeCo.js";const x=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Model/关于倒U型关系的形成机制.md","filePath":"Model/关于倒U型关系的形成机制.md"}'),s={name:"Model/关于倒U型关系的形成机制.md"},i=e("h2",{id:"【模型选择】关于倒u型关系的形成机制",tabindex:"-1"},[t("【模型选择】关于倒U型关系的形成机制 "),e("a",{class:"header-anchor",href:"#【模型选择】关于倒u型关系的形成机制","aria-label":'Permalink to "【模型选择】关于倒U型关系的形成机制"'},"​")],-1),_=e("div",{style:{"text-align":"center"}},[e("div",{style:{border:"2px solid #ccc",padding:"10px",display:"inline-block"}},[e("iframe",{src:"//player.bilibili.com/player.html?bvid=BV1g54y1i7Ro&page=1",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true",style:{width:"750px",height:"450px"}})])],-1),p=r('<p>大家好！今天，我们要分享的视频是关于倒U型关系的形成机制。在之前的视频中，我们提到了如何使用Stata来验证倒U型或U型关系，但并没有具体解释为什么会出现倒U型关系以及其形成逻辑。</p><p>今天，我们将参考一篇优秀的论文，分享我们对倒U型关系形成机制的理解。我们非常推荐大家阅读这篇原文，因为它在我们学习倒U型关系时发挥了非常重要的作用。</p><p>🌟论文中对倒U型关系的解释主要归纳为三种形式：</p><ol><li><strong>边际损失增强强于边际收益</strong></li></ol><p>让我们用决策的全面性和组织绩效来举一个例子。如果决策越全面，收益就越高，因为你考虑的信息越多，可以预测的风险或捕捉的机遇的可能性就会越高，从而提高组织绩效。但是，它也有损失，即当你考虑的东西越多时，你的认知资源是有限的，你可能无法做好每件事，这可能会降低决策的质量。因此，收益和损失同时产生，但后期损失的增长高于边际收益，从而形成倒U型关系。</p><ol start="2"><li><strong>边际收益的减少和边际损失的增加</strong></li></ol><p>这可以用选择的数量和满意度的关系来说明。选择的数量实际上是有一个饱和点的，当你的选择达到这个点时，效应就会变成负的。过多的选择会增加你的决策时间和认知成本，并带来心理负担，从而增加边际损失，而边际收益为零，形成倒U型关系。</p><ol start="3"><li><strong>交互效应</strong></li></ol><p>交互效应很好理解。例如，一个人有动机但缺乏能力，或者有能力但缺乏动机，这两种情况都不会产生很好的效应。只有在两者都成立的条件下，即有心有力，他才能做得比较好。当这两个变量共同作用于一个事物时，如果缺失了某一方面，效应就不会那么好。只有在两者都比较均衡的情况下，才能做好这件事情。</p><p>💡正如论文中所说，倒U型关系实际上只是一种现象，真正需要分析的是为什么会出现倒U型关系，其机制是什么。我们希望通过今天的分享，让你对倒U型关系的形成机制有一个更深入的理解。</p><p>如果我在分享中有任何不清楚的地方，欢迎大家参考原文。我相信原文比我的分享更为清晰和详细，并且包含了我没有提到的更多内容。今天的分享到此结束，感谢大家的观看！</p><hr><p>参考文献：邢璐, 孙健敏, 尹奎, 等. “过犹不及” 效应及其作用机制[J]. 心理科学进展, 2018, 26(4): 719-730.</p>',13);function n(c,d,U,h,m,g){return l(),o("div",null,[i,_,t(" 🎉【模型选择】解释倒U型关系的形成机制 ================================ "),p])}const b=a(s,[["render",n]]);export{x as __pageData,b as default};
