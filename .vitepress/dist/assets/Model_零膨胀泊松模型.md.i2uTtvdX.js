import{_ as t,c as a,a as o,l as e,a1 as d,o as c}from"./chunks/framework.ZVjbeeCo.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Model/零膨胀泊松模型.md","filePath":"Model/零膨胀泊松模型.md"}'),r={name:"Model/零膨胀泊松模型.md"},i=e("h2",{id:"【离散变量】零膨胀泊松模型",tabindex:"-1"},[o("【离散变量】零膨胀泊松模型 "),e("a",{class:"header-anchor",href:"#【离散变量】零膨胀泊松模型","aria-label":'Permalink to "【离散变量】零膨胀泊松模型"'},"​")],-1),l=e("div",{style:{"text-align":"center"}},[e("div",{style:{border:"2px solid #ccc",padding:"10px",display:"inline-block"}},[e("iframe",{src:"//player.bilibili.com/player.html?bvid=BV1pE411w7Kj&page=1",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true",style:{width:"750px",height:"450px"}})])],-1),p=d('<p>大家好！今天，我们要分享的是离散变量的零膨胀泊松模型。如果你之前关注过我的视频，那么相关视频都收藏在了“模型设定”这个文件夹里，你可以根据需要点击进入观看。</p><p>在之前的视频中，我们提到如果我们的因变量y是一个计数变量，我们就需要使用泊松回归。但是，泊松回归存在一些问题，即它假定期望和方差是相等的。如果期望和方差有一定的差距或者差距比较大的情况下，它就会存在过度离散的趋势。如果我们的观测样本中因变量Y存在大量的0，那么就会存在0膨胀的现象。</p><p>今天分享的零膨胀泊松回归模型，就是解决这个问题的。在解释零膨胀泊松回归模型之前，我们需要知道为什么会出现零膨胀这个现象。一个比较经典的例子就是保险索赔的一个例子。在这个例子中，我在Stata中模拟了一份数据，这个数据是一个标准的泊松分布。在保险索赔的情况下，发生事件的分布可能就是长成这样的一个泊松分布：</p><p>关键是，保险索赔有一个标准，比如说小于1000元，他就不会赔付，或者是在事故发生不会太严重的情况下，他都不会选择赔付。在这种情况下，在发生第二次、第四次、第三次、第四次这种事件的情况下，他都会往前面挪。就是这些人可能知道这个事件不大或者怎么样，他都不会选择索赔。那么在这种情况下，数据就会存在零膨胀的现象。</p><p>那么，零膨胀泊松回归是怎么样去解决问题的呢？它首先做一个估计，就是先去估计你有没有索赔。也就是你到底是零还是后面的正整数。如果你是一个正整数的话，那再做一个估计，就跟之前的泊松回归有点相似，就去估计你到底选哪一个正整数。它把它分成了两部分，这样的话，就对零膨胀的这个数据分布做了一些修正。</p><p>这里只是一个比较直观的解释，为什么处理后能解决一些问题。如果你想要更严谨的论证，你可以去翻阅教材。之后，我们将在Stata中演示如何直观的进行一个零膨胀泊松模型的回归。</p><p>关于零膨胀模型的参考代码都来自于UCLA的官方网站。这个官方网站零膨胀泊松模型 zero-inflated poisson。</p><ul><li><a href="https://stats.idre.ucla.edu/stata/dae/zero-inflated-poisson-regression" target="_blank" rel="noreferrer">https://stats.idre.ucla.edu/stata/dae/zero-inflated-poisson-regression</a> 用到的命令，如果你想要更细致的了解，也可以点击之前的相关视频进行了解。</li></ul><p>关于<code>zip</code>命令，它是我们用于后面做这个零膨胀模型回归的一个重要的命令。你可以输入<code>help zip </code>，可以看到这个命令的说明。</p><p>我们同样用一个示例数据集来演示这个过程。可以看到这边就已经在调用数据了。我们先对数据进行一个直观的描述，并且我也会对这个数据的变量进行一些说明：</p><ul><li><code>Count</code>：钓鱼的数量。因为这个数据集是想去统计到美国国家公园来钓鱼的这些渔夫他们钓了多少的鱼。</li><li><code>child</code>：如果你来的人是一个group，那么这个group里面到底有多少个child。</li><li><code>Person</code>：你这个group有几个人。</li><li><code>Camper</code>：你有没有带露营的装备。</li></ul><p>我们同样通过一个直方图来直观的观测我们的y，也就是这个<code>Count</code>钓鱼的数量的一个分布图。<code>Discrete</code>是指定这个变量是一个非连续变量，<code>Frequency</code>是让我们的y轴它是一个频率分布的一个状况。我们这样就呈现了一个图，可以看到的是这个0的数量非常的多。</p><p>我们同样通过<code>tab</code>这个命令来看一下这个变量的一个频率分布图，这样的话也是对数据的情况有一个大概的了解。剩下的，我们就可以进行一个回归。关于这个命令，我自己在跑的时候他老是报错，他要让我写这个选项。大家应该运行上面这个命令是可以运行的。这个地方，我先运行一下。然后这个命令主要是下面会有一个<code>test</code>，它会<code>test</code>说你到底是用零膨胀模型还是用标准的泊松回归。看到的是这个地方的检验结果告诉我的是，我应该是选用零膨胀模型的。同样，我们还要解释的就是这个<code>inflate</code>里面这个变量是什么意思。</p><p>这个地方，当然是y，后面跟的是我们的x。<code>inflate</code>里面的变量，就是用于估计我们刚才的logit模型，也就是第一阶段就是估计它到底是0还是正整数的那些变量。这个地方，我们指定这个<code>person</code>用于第一阶段的那个logit模型的那个估计它到底是0还是正整数。</p><p>所以，一个简单的命令之后，我们这个零膨胀模型，最好还是用稳健标准误，所以我们就只需要在命令的后面加一个<code>vce robust</code>用文件叫标准物就可以了。那这个情况下，如果我们再把这个命令打到后面，它是会报错的，所以我们就可以进行直接进行一个用稳健标准误的一个回归。那这就完成了在Stata里面实现零膨胀泊松模型的一个回归的命令了。</p><p>今天分享的视频就到这里结束了，谢谢大家！</p><hr>',17);function s(n,_,h,u,f,m){return c(),a("div",null,[i,l,o(" 📊 离散变量：零膨胀泊松模型 ================ "),p])}const x=t(r,[["render",s]]);export{b as __pageData,x as default};
