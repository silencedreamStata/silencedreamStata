import{_ as i,c as t,a,l as s,a1 as e,o as p}from"./chunks/framework.ZVjbeeCo.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"StataIntro/在回归中自动生成交互项.md","filePath":"StataIntro/在回归中自动生成交互项.md"}'),n={name:"StataIntro/在回归中自动生成交互项.md"},h=s("h2",{id:"c-stata在回归中自动生成交互项",tabindex:"-1"},[a("c.##Stata在回归中自动生成交互项 "),s("a",{class:"header-anchor",href:"#c-stata在回归中自动生成交互项","aria-label":'Permalink to "c.##Stata在回归中自动生成交互项"'},"​")],-1),l=s("div",{style:{"text-align":"center"}},[s("div",{style:{border:"2px solid #ccc",padding:"10px",display:"inline-block"}},[s("iframe",{src:"//player.bilibili.com/player.html?bvid=BV1JZ4y1x7ma&page=1",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true",style:{width:"750px",height:"450px"}})])],-1),k=e(`<p>大家好！今天，我们要介绍如何在回归中自动生成交互项，另外，我也想和大家介绍一下c.双井号这种常见的代码中出现的含义。</p><p>我们先调用一个常用的数据库，做一个简单的回归。如果按照之前分享的生成交互项的方式，我们可以通过手动生成交互项的方式，比如这样：</p><div class="language-stata vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">stata</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sysuse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> auto,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">clear</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">gen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> interact </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mpg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> headroom</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">reg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> price mpg headroom interact</span></span></code></pre></div><p>然后再放入回归方程中进行回归，得到调节效应。但是，其实也有更方便的写法，比如这样：</p><div class="language-stata vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">stata</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">reg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> price mpg </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">c.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">headroom</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">##</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">c.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mpg</span></span></code></pre></div><p>实现的结果和刚才一样，那么我们需要解释一下这个命令c.。c.表示指代后面的mpg和headroom，在回归的时候，把它当作连续变量。双井号就是在回归的时候，既放入前面的mpg和headroom，也放入它们的交互项。</p><p>如果我们想只放入交互项的话，那么我们只需要使用一个#号，比如这样：</p><div class="language-stata vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">stata</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">reg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> price mpg </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">c.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">headroom</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">c.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mpg</span></span></code></pre></div><p>这样的话，我们在回归中，它只会放入一个交互项。</p><p>如果是一个非连续变量或者是分类变量的话，比如这里的REP78，它只有五个分类。如果我们把它当做连续变量进行回归的话，当然也是可以的，但是这样做它的假设是一个等距的假设。</p><p>但是在有些情况下，我们是要求根据这个变量生成虚拟变量的方式来生成交互项。举个简单的例子，如果我们运行这个i.命令，表示根据rep78这个变量生成n-1个虚拟变量。因为我们这个rep78它只有5个，n-1个就是生成4个虚拟变量。可以看到的是这边生成4个虚拟变量跟headroom的交互项的话，它就会有4个交互项出现在我们的回归方程里面。</p><div class="language-stata vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">stata</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">reg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> price mpg </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">i.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rep78</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">c.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mpg</span></span></code></pre></div><p>i.这个命令，之前也在有一期视频里面和大家分享过。这两个的选择也是根据大家研究的需求来做一个选择。有些情况下，你更在意分类变量每一组的一个区别，比如说二组、三组、四组、五组的一个区别的话，你可能会选择i.。也可以根据自己的需要来做一个选择。</p><p>今天分享的视频就到这里结束了，谢谢大家！</p><hr>`,15);function r(d,c,o,g,E,y){return p(),t("div",null,[h,l,a(" Stata在回归中自动生成交互项 ====================== "),k])}const u=i(n,[["render",r]]);export{_ as __pageData,u as default};
